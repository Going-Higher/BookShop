<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
<!-- 	<resources mapping="/resources/**" location="/resources/" /> -->

<!-- 	스프링의 DispatcherServlet이 요청 경로에 맞는 핸들러를 찾지 못한 경우 -->
<!-- 	그 요청을 처리할 디폴트서블릿핸들러를 등록 -->
<!-- 	(디폴트서블릿핸들러는 요청 처리를 서버(톰캣)의 DefaultServlet에게 위임) -->
	<default-servlet-handler />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- JSTL 메시지 관련 태그가 스프링의 메시지 소스를 사용하도록 지원해주는 JstlView 사용 --> 
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>
	<!-- 컨트롤러가 문자열(뷰이름)을 반환했을 때, TilesViewResolver가 먼저 뷰이름을 처리하고,
	TilesViewResolver가 처리할 수 없는 경우 InternalResourceViewResolver가 처리하도록 order 속성을 설정 -->
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
		<beans:property name="order" value="1" />
	</beans:bean>
	<!-- 타일즈 설정 등록(화면 정의 설정 파일 위치 설정) -->
	 <beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
	   <beans:property name="definitions">
	     <beans:list>
	       <beans:value>/WEB-INF/views/tiles/tiles.xml</beans:value>
	     </beans:list>
	   </beans:property>
	 </beans:bean>
	
	<!-- use-default-filters 속성을 false로 설정하여,
	@Component, @Controller, @Service, @Repository가 붙은 클래스를 자동등록하는 기능을 해제 -->
	<context:component-scan base-package="com.exam.myapp" use-default-filters="false">
		<!-- @Controller가 붙은 클래스를 스프링에 등록 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- MessageSource 객체를 "messageSource"라는 이름으로 스프링에 등록하면,
   해당 MessageSource 객체의 메세지들이 스프링에 등록되어 사용가능 -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
    <!-- 클래스패스 기준으로 메세지를 정의한 프로퍼터파일의 경로를 확장자 제외하고 지정 -->
     <!-- message_en.properties, messag_ko.properties처럼 국가 및 언어 코드를 접미어로 붙인 파일들을 사용하면,
       로케일에 따라서 다른 언어의 메세지들이 자동으로 사용되도록 설정 가능 -->
    	<beans:property name="basename" value="messages"/> 
	</beans:bean>	
	
	<interceptors>
		<interceptor>
			<mapping path="/**"/>
			<exclude-mapping path="/member/login.do"/>
			<exclude-mapping path="/member/add.do"/>
			<exclude-mapping path="/member/check.do"/>
			<exclude-mapping path="/css/**"/>
			<exclude-mapping path="/js/**"/>
			<beans:bean class="com.exam.myapp.member.LoginInterceptor" />
		</interceptor>
	</interceptors>
	
	<!-- 파일이 포함된 폼 데이터를 처리를 담당하는 객체를 multipartResolver 라는 이름으로 등록 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" ></beans:bean>
	
</beans:beans>
